142. Linked List Cycle II
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        ListNode temp=head;
        if(head==null||head.next==null)
        {
            return null;
        }
        while(fast.next!=null&&fast.next.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next; 
            if(slow==fast){
        while(temp!=slow)
        {
            temp=temp.next;
            slow=slow.next;
        }
        return slow;
            }
        }
        return null;
        
        
    }
}
61. Rotate List
     class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode temp=head;
        int count=1;
        if(head==null||head.next==null)
        {
            return head;
        }
        while(temp.next!=null)
        {
            count++;
            temp=temp.next;
            
        }
        temp.next=head;
        k=k%count;
        k=count-k;
        int cc=1;
        ListNode curr=head;
        while(cc<k)
        {
            curr=curr.next;
            cc++;
        }
        head=curr.next;
        curr.next=null;
        
        return head;
        
        
    }
}